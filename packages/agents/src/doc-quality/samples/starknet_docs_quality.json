{
  "source": "starknet_docs",
  "version": "1.0.0",
  "metadata": {
    "owner": "starkware",
    "repository": "starknet-docs"
  },
  "testCases": [
    {
      "query": "What is account abstraction in Starknet?",
      "expectedTopics": [
        "account abstraction",
        "account contracts",
        "smart accounts"
      ],
      "expectedContent": "In Starknet, all accounts are smart contracts with programmable logic - there are no EOAs (Externally Owned Accounts). This means accounts can have custom signature verification, transaction validation, and fee payment mechanisms.",
      "type": "conceptual",
      "difficulty": "basic",
      "tags": ["accounts", "architecture"]
    },
    {
      "query": "How are account contracts deployed in Starknet?",
      "expectedTopics": [
        "account deployment",
        "Universal Deployer",
        "DEPLOY_ACCOUNT"
      ],
      "expectedContent": "Account contracts can be deployed either through a DEPLOY_ACCOUNT transaction (which requires a pre-funded account) or using the Universal Deployer Contract (UDC), which provides a standardized way to deploy contracts with deterministic addresses.",
      "type": "procedural",
      "difficulty": "intermediate",
      "tags": ["accounts", "deployment"]
    },
    {
      "query": "What functions must a Starknet account contract implement?",
      "expectedTopics": [
        "account interface",
        "required functions",
        "validation"
      ],
      "expectedContent": "Starknet account contracts must implement __validate__, __execute__ entrypoints. __validate_declare__ and __validate_deploy__ are optional. These handle transaction validation, execution, class declaration, and deployment validation respectively.",
      "type": "factual",
      "difficulty": "intermediate",
      "tags": ["accounts", "smart contracts", "interface"]
    },
    {
      "query": "What is Cairo and Sierra in the context of Starknet?",
      "expectedTopics": ["Cairo", "Sierra", "compilation", "smart contracts"],
      "expectedContent": "Cairo is the native programming language for Starknet. Sierra (Safe Intermediate Representation) is an intermediate language between Cairo and Cairo Assembly (Casm). Cairo code is first compiled to Sierra, which ensures all executions are provable before final compilation to Casm.",
      "type": "conceptual",
      "difficulty": "basic",
      "tags": ["Cairo", "smart contracts", "compilation"]
    },
    {
      "query": "How are contract classes and instances separated in Starknet?",
      "expectedTopics": [
        "contract class",
        "contract instance",
        "class hash",
        "deployment"
      ],
      "expectedContent": "Starknet separates contract code (class) from contract state (instance). Contract classes are declared once and identified by a class hash, while instances are deployed with references to their class and maintain their own state. Multiple instances can use the same class.",
      "type": "conceptual",
      "difficulty": "intermediate",
      "tags": ["smart contracts", "architecture"]
    },
    {
      "query": "What hash functions are available in Starknet?",
      "expectedTopics": [
        "hash functions",
        "Pedersen",
        "Poseidon",
        "Starknet Keccak"
      ],
      "expectedContent": "Starknet provides three hash functions: Pedersen hash (efficient for proving but lower security), Poseidon hash (optimized for ZK-proving systems), and Starknet Keccak (compatible with Ethereum's keccak256 but using only the first 250 bits).",
      "type": "factual",
      "difficulty": "intermediate",
      "tags": ["cryptography", "hash functions"]
    },
    {
      "query": "How is the Starknet state structured?",
      "expectedTopics": ["state", "Merkle-Patricia tries", "state commitment"],
      "expectedContent": "Starknet state consists of two Merkle-Patricia tries: the contracts trie (mapping addresses to contract states) and the classes trie (mapping class hashes to compiled class hashes). The state commitment combines the roots of these two tries.",
      "type": "conceptual",
      "difficulty": "advanced",
      "tags": ["state", "architecture"]
    },
    {
      "query": "What is the transaction flow in Starknet?",
      "expectedTopics": [
        "transaction flow",
        "validation",
        "execution",
        "fee mechanism"
      ],
      "expectedContent": "Transactions in Starknet go through: 1) Validation (checking signature and nonce), 2) Execution (performing the transaction's operations), 3) Fee charging (based on resource usage), and 4) State update (committing changes to the state).",
      "type": "conceptual",
      "difficulty": "intermediate",
      "tags": ["transactions", "architecture"]
    },
    {
      "query": "How does L1-L2 messaging work in Starknet?",
      "expectedTopics": [
        "L1-L2 messaging",
        "L1 handler",
        "messaging mechanism"
      ],
      "expectedContent": "L1-L2 messaging uses specialized functions: sending messages from L1 to L2 involves the Starknet core contract and L1 handler functions on L2, while L2-to-L1 messages use send_message_to_l1 system call and can be consumed by L1 contracts through the core contract.",
      "type": "conceptual",
      "difficulty": "advanced",
      "tags": ["messaging", "interoperability"]
    },
    {
      "query": "What is the STRK token and its utility?",
      "expectedTopics": ["STRK", "native token", "token economics"],
      "expectedContent": "STRK is Starknet's native token used for transaction fees, staking (securing the network), and governance. It has a fixed initial supply of 10 billion tokens with a planned distribution across early contributors, investors, foundation reserves, and community initiatives.",
      "type": "factual",
      "difficulty": "basic",
      "tags": ["economics", "token"]
    },
    {
      "query": "How does staking work in Starknet?",
      "expectedTopics": ["staking", "validators", "delegation", "rewards"],
      "expectedContent": "Staking in Starknet allows STRK holders to become validators (requiring 20,000 STRK on mainnet) or delegators. Validators run nodes and can enable delegation pools, while delegators can stake without running nodes. Rewards are distributed based on stake amount and a minting curve formula.",
      "type": "conceptual",
      "difficulty": "intermediate",
      "tags": ["staking", "consensus"]
    },
    {
      "query": "What is the minting curve formula for Starknet staking rewards?",
      "expectedTopics": ["minting curve", "staking rewards", "token inflation"],
      "expectedContent": "The minting curve formula is M = (C/10) × √S, where S is the staking rate percentage, M is the minting rate percentage, and C is the annual minting rate cap (1.6%). This creates a reward system that incentivizes staking while maintaining a balance.",
      "type": "factual",
      "difficulty": "advanced",
      "tags": ["staking", "economics"]
    },
    {
      "query": "How does the StarkGate bridge work?",
      "expectedTopics": ["StarkGate", "bridge", "token bridging", "L1-L2"],
      "expectedContent": "StarkGate bridges assets between Ethereum (L1) and Starknet (L2). For deposits, tokens are locked in L1 contracts and minted on L2. For withdrawals, tokens are burned on L2 and unlocked on L1. The bridge includes security measures like withdrawal limits and transaction verification.",
      "type": "conceptual",
      "difficulty": "intermediate",
      "tags": ["bridge", "interoperability"]
    },
    {
      "query": "What is the withdrawal process from Starknet to Ethereum?",
      "expectedTopics": ["withdrawal", "L2-L1", "bridge", "finalization"],
      "expectedContent": "Withdrawals from Starknet to Ethereum involve: 1) Initiating withdrawal on L2 (burning tokens), 2) Waiting for L2 state update to be proven and verified on L1, 3) Finalizing the withdrawal on L1 to receive tokens (permissionless process that anyone can trigger).",
      "type": "procedural",
      "difficulty": "intermediate",
      "tags": ["bridge", "withdrawal"]
    },
    {
      "query": "What is a class hash in Starknet?",
      "expectedTopics": ["class hash", "contract classes", "declaration"],
      "expectedContent": "A class hash uniquely identifies a contract class (code) in Starknet. It's derived from the Sierra representation of the contract and is used to reference contract code during deployment. Contract classes must be declared (registered) on Starknet before they can be used.",
      "type": "factual",
      "difficulty": "intermediate",
      "tags": ["smart contracts", "deployment"]
    },
    {
      "query": "What is a compiled class hash in Starknet?",
      "expectedTopics": [
        "compiled class hash",
        "CASM",
        "Sierra",
        "compilation"
      ],
      "expectedContent": "A compiled class hash uniquely identifies the CASM (Cairo Assembly) representation of a contract. It's derived from the compiled Sierra code and is stored in the classes trie. The compiled class hash enables on-chain verification of Cairo code execution.",
      "type": "factual",
      "difficulty": "advanced",
      "tags": ["smart contracts", "compilation"]
    },
    {
      "query": "How are contract addresses determined in Starknet?",
      "expectedTopics": [
        "contract address",
        "address calculation",
        "deployment"
      ],
      "expectedContent": "Contract addresses in Starknet are deterministically calculated based on the deployer address, salt (random value), contract class hash, and constructor calldata. This enables counterfactual deployment and address prediction before actual deployment.",
      "type": "factual",
      "difficulty": "intermediate",
      "tags": ["smart contracts", "deployment"]
    },
    {
      "query": "What are the main development tools for Starknet?",
      "expectedTopics": [
        "development tools",
        "Scarb",
        "Starknet Foundry",
        "Starkli"
      ],
      "expectedContent": "Key Starknet development tools include Scarb (package manager/build system), Starknet Foundry (smart contract development framework), VS Code Cairo extension (editor support), Starknet Devnet (local development), and Starkli (CLI for interaction).",
      "type": "factual",
      "difficulty": "basic",
      "tags": ["tools", "development"]
    },
    {
      "query": "How can I set up a local Starknet development environment?",
      "expectedTopics": ["development environment", "devnet", "setup"],
      "expectedContent": "Set up a Starknet development environment by: 1) Installing Scarb for Cairo compilation, 2) Installing Starkli for contract interaction, 3) Setting up a local devnet or connecting to Sepolia testnet, and 4) Optionally installing IDE extensions and Starknet Foundry for testing.",
      "type": "procedural",
      "difficulty": "basic",
      "tags": ["tools", "devnet", "quickstart"]
    },
    {
      "query": "What frameworks exist for building dApps on Starknet?",
      "expectedTopics": ["dApp development", "frameworks", "frontend"],
      "expectedContent": "Frameworks for Starknet dApp development include Scaffold-Stark (Next.js-based starter), Starknet React (React hooks), wallet connection libraries like Get Starknet and Starknetkit, Invisible SDK (email-based onboarding), and Starkweb (TypeScript toolkit).",
      "type": "factual",
      "difficulty": "intermediate",
      "tags": ["tools", "dapps", "frontend"]
    },
    {
      "query": "How does the fee mechanism work in Starknet?",
      "expectedTopics": ["fee mechanism", "gas", "transaction fees"],
      "expectedContent": "Starknet's fee mechanism calculates costs based on actual resource usage (computation, storage, etc.). Fees can be paid in both ETH and STRK tokens. A portion of STRK fees is converted to ETH to cover L1 costs, while some STRK is burned. Fee estimation is provided before transaction execution.",
      "type": "conceptual",
      "difficulty": "intermediate",
      "tags": ["fees", "economics"]
    },
    {
      "query": "What wallets support Starknet?",
      "expectedTopics": ["wallets", "account contracts", "user interface"],
      "expectedContent": "Starknet-compatible wallets include ArgentX, Braavos, MetaMask Snaps, Ledger hardware wallet support, and various other options with features like social recovery, multisig functionality, and bundled transaction support.",
      "type": "factual",
      "difficulty": "basic",
      "tags": ["wallets", "ecosystem"]
    },
    {
      "query": "How do system calls work in Cairo contracts?",
      "expectedTopics": ["system calls", "contract interaction", "OS"],
      "expectedContent": "System calls in Cairo contracts are special functions that interact with the Starknet Operating System. They include calls for storage access, contract deployment, L1 messaging, emitting events, getting execution information, and other privileged operations not directly accessible through Cairo code.",
      "type": "conceptual",
      "difficulty": "advanced",
      "tags": ["smart contracts", "cairo", "system calls"]
    },
    {
      "query": "What is data availability in Starknet?",
      "expectedTopics": ["data availability", "state updates", "volition"],
      "expectedContent": "Data availability in Starknet refers to how state update data is made available. Starknet uses a hybrid approach called Volition, where users can choose between Full Rollup mode (data posted on Ethereum L1) or Validium mode (data kept off-chain with data availability committee verification).",
      "type": "conceptual",
      "difficulty": "advanced",
      "tags": ["architecture", "scalability"]
    },
    {
      "query": "How do Starknet full nodes work?",
      "expectedTopics": ["full nodes", "synchronization", "state management"],
      "expectedContent": "Starknet full nodes (like Pathfinder, Juno, Madara) maintain a local copy of the network state, process transactions, and serve RPC requests. They synchronize with the network by processing blocks from L1 and other sequencers, rebuilding the state trie, and validating state transitions.",
      "type": "conceptual",
      "difficulty": "advanced",
      "tags": ["nodes", "infrastructure"]
    },
    {
      "query": "What is the SHARP prover system in Starknet?",
      "expectedTopics": ["SHARP", "provers", "STARK proofs", "verification"],
      "expectedContent": "SHARP (Shared Prover) is Starknet's proving system that generates STARK proofs for state transitions. It batches multiple state updates into a single proof for efficiency, processes proofs asynchronously from transaction execution, and submits verification to Ethereum L1 to ensure finality and security.",
      "type": "conceptual",
      "difficulty": "advanced",
      "tags": ["provers", "zk-proofs", "verification"]
    }
  ]
}
