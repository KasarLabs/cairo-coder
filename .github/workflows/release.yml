---
name: Release Cairo Coder

on:
  workflow_dispatch:
    inputs:
      release-type:
        description: Type of release
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
        default: patch

permissions:
  contents: write
  packages: write

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      new-version: ${{ steps.version.outputs.new-version }}
      new-tag: ${{ steps.version.outputs.new-tag }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Calculate new version
        id: version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          
          MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)  
          PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
          
          case "${{ inputs.release-type }}" in
            "major") NEW_VERSION="$((MAJOR + 1)).0.0" ;;
            "minor") NEW_VERSION="$MAJOR.$((MINOR + 1)).0" ;;
            "patch") NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))" ;;
          esac
          
          NEW_TAG="v$NEW_VERSION"
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new-tag=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Update version and create tag
        run: |
          npm version ${{ steps.version.outputs.new-version }} --no-git-tag-version
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json
          git commit -m "release: ${{ steps.version.outputs.new-tag }}"
          git tag "${{ steps.version.outputs.new-tag }}"
          git push origin main --tags

  build-and-publish:
    needs: prepare-release
    uses: ./.github/workflows/publish-image.yml
    with:
      version: ${{ needs.prepare-release.outputs.new-version }}
      is-release: true
    secrets: inherit

  create-release:
    needs: [prepare-release, build-and-publish]
    runs-on: ubuntu-latest
    
    steps:
      - name: Generate and create release
        uses: actions/github-script@v7
        with:
          script: |
            // Generate release notes
            const { data } = await github.rest.repos.generateReleaseNotes({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: '${{ needs.prepare-release.outputs.new-tag }}'
            });
            
            // Add Docker images info
            const dockerInfo = `

## Docker Images

\`\`\`bash
docker pull ghcr.io/${{ github.repository }}/backend:${{ needs.prepare-release.outputs.new-tag }}
docker pull ghcr.io/${{ github.repository }}/ingester:${{ needs.prepare-release.outputs.new-tag }}
\`\`\`
            `;
            
            // Create release
            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: '${{ needs.prepare-release.outputs.new-tag }}',
              name: data.name,
              body: data.body + dockerInfo,
              draft: false,
              prerelease: false
            });