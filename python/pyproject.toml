[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "cairo-coder"
version = "0.1.0"
description = "Cairo language code generation service using DSPy RAG"
authors = [{ name = "Kasar Labs", email = "admin@kasarlabs.com" }]
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Topic :: Software Development :: Code Generators",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
dependencies = [
  "dspy-ai>=2.5.0",
  "fastapi>=0.115.0",
  "uvicorn[standard]>=0.32.0",
  "websockets>=13.0",
  "asyncpg>=0.30.0",
  "pydantic>=2.0.0",
  "pydantic-settings>=2.0.0",
  "numpy>=1.24.0",
  "openai>=1.0.0",
  "anthropic>=0.39.0",
  "google-generativeai>=0.8.0",
  "python-dotenv>=1.0.0",
  "structlog>=24.0.0",
  "httpx>=0.27.0",
  "tenacity>=8.0.0",
  "prometheus-client>=0.20.0",
  "python-multipart>=0.0.6",
  "dspy>=2.6.27",
  "psycopg2>=2.9.10",
  "pgvector>=0.4.1",
  "marimo>=0.14.11",
  "mlflow>=2.20",
  "pytest>=8.4.1",
  "pytest-asyncio>=1.0.0",
  "langsmith>=0.4.6",
  "psycopg2-binary>=2.9.10",
  "typer>=0.15.0",
  # Docs crawler dependencies
  "aiohttp>=3.9.0",
  "beautifulsoup4>=4.12.0",
  "lxml>=4.9.0",
  "markdownify>=0.11.0",
  "tqdm>=4.66.0",
]

[project.optional-dependencies]
dev = [
  "pytest>=8.0.0",
  "pytest-asyncio>=0.23.0",
  "pytest-cov>=5.0.0",
  "pytest-benchmark>=4.0.0",
  "pytest-mock>=3.0.0",
  "black>=24.0.0",
  "ruff>=0.4.0",
  "mypy>=1.0.0",
  "types-toml>=0.10.0",
  "pre-commit>=3.0.0",
  "testcontainers[postgres]>=4.0.0",
  "nest-asyncio>=1.6.0",
]

[project.scripts]
cairo-coder = "cairo_coder.server.app:main"
cairo-coder-api = "cairo_coder.api.server:run"
generate_starklings_dataset = "cairo_coder.optimizers.generation.generate_starklings_dataset:cli_main"
optimize_generation = "cairo_coder.optimizers.generation.optimize_generation:main"
starklings_evaluate = "scripts.starklings_evaluate:main"
cairo-coder-summarize = "scripts.summarizer.cli:app"
docs-crawler = "scripts.docs_crawler:main"

[project.urls]
"Homepage" = "https://github.com/cairo-coder/cairo-coder"
"Bug Tracker" = "https://github.com/cairo-coder/cairo-coder/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/cairo_coder", "scripts"]

[tool.hatch.metadata]
allow-direct-references = true

[tool.ruff]
line-length = 100
target-version = "py310"
extend-include = ["*.pyi?"]

[tool.ruff.lint]
select = [
  "E",   # pycodestyle errors
  "F",   # pyflakes errors
  "I",   # isort
  "N",   # pep8-naming
  "UP",  # pyupgrade
  "B",   # flake8-bugbear
  "C4",  # flake8-comprehensions
  "DTZ", # flake8-datetimez
  "T20", # flake8-print
  "SIM", # flake8-simplify
  "RET", # flake8-return
]
ignore = [
  "E501",  # line too long (handled by black)
  "B008",  # do not perform function calls in argument defaults
  "T201",  # print statements (we use structlog)
  "N803",  # Argument lowercase
  "UP045", # Use X | None instead of Optional[X]
]
[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.black]
line-length = 100
target-version = ['py310']

[tool.mypy]
python_version = "3.10"
ignore_missing_imports = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_optional = true

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["src"]
asyncio_mode = "auto"
filterwarnings = [
  "ignore::DeprecationWarning",
  "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["src/cairo_coder"]
omit = ["*/tests/*", "*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if __name__ == .__main__.:",
  "raise AssertionError",
  "raise NotImplementedError",
  "if TYPE_CHECKING:",
]

[dependency-groups]
dev = ["nest-asyncio>=1.6.0", "ty>=0.0.1a15"]
