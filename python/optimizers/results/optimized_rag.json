{
  "query_processor.retrieval_program": {
    "traces": [],
    "train": [],
    "demos": [],
    "signature": {
      "instructions": "Analyze a Cairo programming query (focused on the Cairo language, Starknet smart contracts, testing with Starknet Foundry, or related blockchain development on Starknet, including client-side interactions via SDKs like starknet.js) to extract relevant search terms and identify appropriate documentation sources. The goal is to generate search queries that can retrieve factual context, documentation, traits, syscalls, examples, and patterns to inform or assist in resolving the query without providing code. Prioritize coverage of core elements like integer types (e.g., i128 exists as a signed integer, but i129 does not; use Into/TryInto traits for conversions between i128, u128, felt252, and handling u256 as two felts in serialization), storage management (e.g., structs with Serde/Store derives, maps/vectors), events, ABIs, syscalls (e.g., get_block_timestamp for timeouts, contract interactions via dispatchers like ERC20Dispatcher), token interfaces (e.g., ERC20 from OpenZeppelin Cairo), proofs/verification (e.g., signatures or Merkle proofs, with traits from corelib), contract patterns (e.g., upgradeability, locking/claiming/refunding funds, authorized callers), testing (e.g., #[should_panic] attributes in Cairo tests, cheatcode functions like start_cheat_caller_address and stop_cheat_caller_address in Starknet Foundry, handling reverts on invalid inputs like zero prices), and Starknet protocol details (e.g., transaction versions like V3 invoke transactions with resource bounds, nonce management for validity, mempool time-to-live (TTL) of 5 minutes, no inherent timestamp fields in V3 transactions but signature validity tied to nonce and TTL, network testnets like Sepolia). For client-side queries (e.g., TypeScript interactions), target SDK-specific details like starknet.js v7 for V3 transaction formats, argument serialization (e.g., ContractAddress and u256 handling), and authorization. Ignore non-Cairo/Starknet queries or vague/non-specific inputs (e.g., foreign language without Cairo context), generating minimal or empty outputs with a note if the query is off-topic.\n\nInput format:\n- \"query\": A string containing the user's question or task description, possibly including code snippets for context (analyze but do not output or execute code; focus on patterns like test assertions failing due to expected panics or contract reverts).\n- \"chat_history\": A string summarizing prior conversation or \"None\" if no history (e.g., incorporate context like previous discussions on test corrections or panic handling).\n\nStrategy:\n1. Break down the query into key components: language features (types, traits, conversions, attributes like #[should_panic]), Starknet specifics (contracts, storage, events, syscalls, interactions, protocol rules like transaction TTL, nonces, V3 formats, resource bounds), testing (Starknet Foundry cheats, panic/revert validation), application logic (e.g., remittances with timeouts, token transfers, authorized function calls), and client-side aspects (e.g., SDK invocations, argument passing, network specifics like Sepolia).\n2. Generate 3-10 targeted search queries as a list of strings, focusing on precise terms to fetch relevant docs or examples (e.g., \"cairo i128 to felt252 conversion example\" for practical usage; \"Cairo get_block_timestamp syscall\" for timeouts; \"starknet.js v7 invoke contract V3 TypeScript example\" or \"starknet.js resource bounds Sepolia\" for client-side; \"Starknet v3 transaction fields nonce TTL\" or \"Starknet invoke transaction signature validity over time\" for protocol details; \"cairo #[should_panic] attribute test example\" or \"starknet foundry cheat caller address\" for testing; avoid overly broad or app-specific queries like \"remittance platform\" that yield few results—instead target primitives like \"Starknet contract storage maps\" or \"Cairo event emission examples\"; ensure queries address version-specific behaviors (e.g., v3 transactions) and serialization details (e.g., u256 as two felts)).\n3. Identify 3-5 relevant documentation resources from this prioritized list, selecting based on query needs and ensuring coverage for testing/client-side gaps:\n   - 'cairo_book': For core language features, structs, enums, syscalls, traits, attributes like #[should_panic].\n   - 'corelib_docs': For detailed implementations like integer types, conversions (Into/TryInto), serialization, traits in proofs/timestamps/signatures.\n   - 'cairo_by_example': For practical code snippets, patterns (e.g., storage, events, conversions, test setups).\n   - 'starknet_docs': For contract deployment, interactions, block info, ABIs, dispatchers, protocol rules (e.g., transaction V3 formats, nonces, TTL, mempools, no timestamps in transactions).\n   - 'openzeppelin_docs': For ERC20/ERC721 interfaces, token handling, security patterns (e.g., access control for authorized callers).\n   - 'scarb_docs': For build tools, but only if query involves compilation/deployment.\n   - 'starknet_foundry': For testing specifics (e.g., cheatcodes, panic handling, test assertions on reverts).\n   Add notes in feedback if a resource fills gaps (e.g., corelib_docs for traits in proofs/timestamps; starknet_docs for V3 transaction validity and TTL details; starknet_foundry for test corrections involving panics or cheats). If the query involves client-side SDKs like starknet.js, note the limitation of available resources (e.g., \"starknet_docs covers protocol but not SDK implementation; suggest external starknet.js docs for TypeScript examples\") and prioritize queries that could retrieve SDK context indirectly via starknet_docs mentions of SDKs.\n\nOutput format (structured as YAML-like sections, no code, no full analysis text—only the lists and notes where specified):\n### search_queries\n['query1', 'query2', ...]  # List of concise, targeted strings\n\n### resources\n['resource1', 'resource2', ...]  # List of strings from the above options\n\nIf the query is not Cairo/Starknet-related or too vague, output empty lists and a brief note: \"Query not specific to Cairo/Starknet; no relevant searches or resources generated.\"",
      "fields": [
        {
          "prefix": "Chat History:",
          "description": "Previous conversation context for better understanding of the query. May be empty."
        },
        {
          "prefix": "Query:",
          "description": "User's Cairo\/Starknet programming question or request that needs to be processed"
        },
        {
          "prefix": "Reasoning: Let's think step by step in order to",
          "description": "${reasoning}"
        },
        {
          "prefix": "Search Queries:",
          "description": "A list of __3__ specific semantic search queries to make to a vector store to find relevant documentation."
        },
        {
          "prefix": "Resources:",
          "description": "List of documentation sources. Available sources: cairo_book: The Cairo Programming Language Book. Essential for core language syntax, semantics, types (felt252, structs, enums, Vec), traits, generics, control flow, memory management, writing tests, organizing a project, standard library usage, starknet interactions. Crucial for smart contract structure, storage, events, ABI, syscalls, contract deployment, interaction, L1<>L2 messaging, Starknet-specific attributes., starknet_docs: The Starknet Documentation. For the Starknet protocol, the STWO prover, architecture, APIs, syscalls, network interaction, deployment, ecosystem tools (Starkli, indexers, StarknetJS, wallets), general Starknet knowledge. This should not be included for Coding and Programming questions, but rather, only for questions about Starknet, Proving, ZK, STWO, SHARP itself., starknet_foundry: The Starknet Foundry Documentation. For using the Foundry toolchain: writing, compiling, testing (unit tests, integration tests), and debugging Starknet contracts., cairo_by_example: Cairo by Example Documentation. Provides practical Cairo code snippets for specific language features or common patterns. Useful for how-to syntax questions. This should not be included for Smart Contract questions, but for all other Cairo programming questions., openzeppelin_docs: OpenZeppelin Cairo Contracts Documentation. For using the OZ library: standard implementations (ERC20, ERC721), access control, security patterns, contract upgradeability. Crucial for building standard-compliant contracts., corelib_docs: Cairo Core Library Documentation. For using the Cairo core library: basic types, stdlib functions, stdlib structs, macros, and other core concepts. Essential for Cairo programming questions., scarb_docs: Scarb Documentation. For using the Scarb package manager: building, compiling, generating compilation artifacts, managing dependencies, configuration of Scarb.toml."
        }
      ]
    },
    "lm": null
  },
  "document_retriever.vector_db": {
    "k": 5
  },
  "retrieval_judge.rater": {
    "traces": [],
    "train": [],
    "demos": [],
    "signature": {
      "instructions": "Compare a system's retrieval response to the query and rate how much it can be leveraged to answer the query. When asked to reason, enumerate key ideas in each response, and whether they are present in the expected output. A document is considered useful if it is directly relevant to the query, or if it is informative and can be useful for context. For example, if the query is about creating or fixing a smart contract, then, an example of a smart contract, even if not _directly_ related, is considered useful. If the query is about a specific Cairo language feature, then a document about that feature is considered useful. Contract and test templates are always considered useful.",
      "fields": [
        {
          "prefix": "Query:",
          "description": "User's specific Cairo programming question or request for code generation"
        },
        {
          "prefix": "System Resource:",
          "description": "Single resource text (content + minimal metadata/title)"
        },
        {
          "prefix": "Reasoning:",
          "description": "A short sentence, on why a selected resource will be useful. If it's not selected, reason about why it's not going to be useful. Start by Resource <resource_title>..."
        },
        {
          "prefix": "Resource Note",
          "description": "A note between 0 and 1.0 on how useful the resource is to directly answer the query. 0 being completely unrelated, 1.0 being very relevant, 0.5 being 'not directly relatd but still informative and can be useful for context."
        }
      ]
    },
    "lm": null
  },
  "generation_program.generation_program.predict": {
    "traces": [],
    "train": [],
    "demos": [],
    "signature": {
      "instructions": "Analyze a Cairo programming query and use the context to generate a high-quality Cairo code solution and explanations. \nReason about how to properly solve the query, based on the input code (if any) and the context.",
      "fields": [
        {
          "prefix": "Chat History:",
          "description": "Previous conversation context for continuity and better understanding"
        },
        {
          "prefix": "Query:",
          "description": "User's specific Cairo programming question or request for code generation"
        },
        {
          "prefix": "Context:",
          "description": "Retrieved Cairo documentation, examples, and relevant information to inform the response. Use the context to inform the response - maximize using context's content."
        },
        {
          "prefix": "Reasoning: Let me analyze the Cairo requirements step by step.",
          "description": "Step-by-step analysis of the Cairo programming task and solution approach"
        },
        {
          "prefix": "Answer:",
          "description": "The Cairo code that solves the user's query. It should be complete, correct, and follow Cairo syntax and best practices. It should be wrapped inside a ```cairo block."
        }
      ]
    },
    "lm": null
  },
  "metadata": {
    "dependency_versions": {
      "python": "3.12",
      "dspy": "3.0.3",
      "cloudpickle": "3.1"
    }
  }
}
