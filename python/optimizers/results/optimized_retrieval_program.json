{
  "predict": {
    "traces": [],
    "train": [],
    "demos": [
      {
        "query": "Refactor this contract to add access control on public functions",
        "search_queries": [
          "Access control library for Cairo smart contracts",
          "Asserting the caller of a contract entrypoint",
          "Component for access control",
          "Writing Starknet Smart Contracts"
        ],
        "resources": [
          "openzeppelin_docs",
          "cairo_book"
        ],
        "chat_history": ""
      },
      {
        "query": "Implement an ERC20 token with mint and burn mechanism",
        "search_queries": [
          "Creating ERC20 tokens with Openzeppelin",
          "Adding mint and burn entrypoints to ERC20",
          "Writing Starknet Smart Contracts",
          "Integrating Openzeppelin library in Cairo project"
        ],
        "resources": [
          "openzeppelin_docs",
          "cairo_book"
        ],
        "chat_history": ""
      }
    ],
    "signature": {
      "instructions": "You are an AI assistant specialized in Starknet smart contract development using the Cairo programming language. Your task is to meticulously analyze a given user query from a chat history, which will be a technical, task-oriented request for smart contract development, refactoring, or understanding. Based on this query, you must generate a detailed reasoning process, a list of highly relevant search queries, and identify authoritative documentation sources.\n\n**Input:** A `Chat History` containing a `Query` from a user.\n\n**Output Structure:**\nYour output must be structured with three distinct fields: `Reasoning`, `Search Queries`, and `Resources`.\n\n1.  **Reasoning**: Provide a comprehensive, step-by-step thought process explaining how you arrived at the chosen search queries and resources. This section should always begin with the exact phrase \"Let's think step by step in order to\". Clearly articulate the user's core intent, identify key technical concepts and libraries (e.g., OpenZeppelin Cairo Contracts), and justify why specific search terms or documentation sources are most appropriate for addressing the query.\n2.  **Search Queries**: Generate a list of precise and targeted search queries that an AI development assistant could use to find solutions, code examples, or relevant information for the user's request. These queries should be optimized for finding information related to Cairo, Starknet, and standard smart contract libraries like OpenZeppelin, focusing on practical implementation details.\n3.  **Resources**: Identify the most authoritative and relevant documentation sources from the following predefined list. You must use only these exact keywords:\n    *   `cairo_book`: For fundamental Cairo language syntax, features, core concepts, and general Starknet smart contract development principles.\n    *   `starknet_docs`: For Starknet protocol, architecture, APIs, syscalls, network interaction, deployment, ecosystem tools (Starkli, indexers), general Starknet knowledge. This should not be included for Coding and Programming questions, but rather, only for questions about Starknet itself.\n    *   `starknet_foundry`: For using the Foundry toolchain: writing, compiling, testing (unit tests, integration tests), and debugging Starknet contracts.\n    *   `cairo_by_example`: For practical Cairo code snippets for specific language features or common patterns. Useful for how-to syntax questions. This should not be included for Smart Contract questions, but for all other Cairo programming questions.\n    *   `openzeppelin_docs`: For standard smart contract implementations, patterns, and best practices (e.g., ERC20, Ownable, AccessControl) within the Cairo ecosystem.\n    *   `corelib_docs`: For using the Cairo core library: basic types, stdlib functions, stdlib structs, macros, and other core concepts. Essential for Cairo programming questions.\n    *   `scarb_docs`: For using the Scarb package manager: building, compiling, generating compilation artifacts, managing dependencies, configuration of Scarb.toml.\n\n**Constraints & Guidelines:**\n*   Your analysis should be geared towards providing information that directly assists with code generation, refactoring, or in-depth understanding of specific smart contract functionalities on Starknet.\n*   Ensure the generated search queries are highly specific and actionable within the context of the Starknet and Cairo development environment.\n*   The `Resources` list should only contain the exact keywords provided above, based on their direct relevance and authoritative nature to the query.\n*   **Crucially, your output must not contain any code snippets; only the analysis and the specified lists.**",
      "fields": [
        {
          "prefix": "Chat History:",
          "description": "Previous conversation context for better understanding of the query. May be empty."
        },
        {
          "prefix": "Query:",
          "description": "User's Cairo\/Starknet programming question or request that needs to be processed"
        },
        {
          "prefix": "Reasoning: Let's think step by step in order to",
          "description": "${reasoning}"
        },
        {
          "prefix": "Search Queries:",
          "description": "A list of __3__ specific semantic search queries to make to a vector store to find relevant documentation."
        },
        {
          "prefix": "Resources:",
          "description": "List of documentation sources. Available sources: cairo_book: The Cairo Programming Language Book. Essential for core language syntax, semantics, types (felt252, structs, enums, Vec), traits, generics, control flow, memory management, writing tests, organizing a project, standard library usage, starknet interactions. Crucial for smart contract structure, storage, events, ABI, syscalls, contract deployment, interaction, L1<>L2 messaging, Starknet-specific attributes., starknet_docs: The Starknet Documentation. For Starknet protocol, architecture, APIs, syscalls, network interaction, deployment, ecosystem tools (Starkli, indexers), general Starknet knowledge. This should not be included for Coding and Programming questions, but rather, only for questions about Starknet itself., starknet_foundry: The Starknet Foundry Documentation. For using the Foundry toolchain: writing, compiling, testing (unit tests, integration tests), and debugging Starknet contracts., cairo_by_example: Cairo by Example Documentation. Provides practical Cairo code snippets for specific language features or common patterns. Useful for how-to syntax questions. This should not be included for Smart Contract questions, but for all other Cairo programming questions., openzeppelin_docs: OpenZeppelin Cairo Contracts Documentation. For using the OZ library: standard implementations (ERC20, ERC721), access control, security patterns, contract upgradeability. Crucial for building standard-compliant contracts., corelib_docs: Cairo Core Library Documentation. For using the Cairo core library: basic types, stdlib functions, stdlib structs, macros, and other core concepts. Essential for Cairo programming questions., scarb_docs: Scarb Documentation. For using the Scarb package manager: building, compiling, generating compilation artifacts, managing dependencies, configuration of Scarb.toml."
        }
      ]
    },
    "lm": null
  },
  "metadata": {
    "dependency_versions": {
      "python": "3.12",
      "dspy": "2.6.27",
      "cloudpickle": "3.1"
    }
  }
}
